name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Job 1: Code Quality and Testing
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        workspace: ['packages/contracts', 'apps/web', 'functions']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Turbo
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      # Contracts specific steps
      - name: Compile contracts
        if: matrix.workspace == 'packages/contracts'
        run: |
          cd packages/contracts
          npm run build

      - name: Run contract tests
        if: matrix.workspace == 'packages/contracts'
        run: |
          cd packages/contracts
          npm run test

      - name: Run contract linting
        if: matrix.workspace == 'packages/contracts'
        run: |
          cd packages/contracts
          npm run lint

      # Web app specific steps
      - name: Run web app tests
        if: matrix.workspace == 'apps/web'
        run: |
          cd apps/web
          npm run test -- --coverage --watchAll=false

      - name: Run web app linting
        if: matrix.workspace == 'apps/web'
        run: |
          cd apps/web
          npm run lint

      - name: Type check web app
        if: matrix.workspace == 'apps/web'
        run: |
          cd apps/web
          npx tsc --noEmit

      - name: Build web app
        if: matrix.workspace == 'apps/web'
        run: |
          cd apps/web
          npm run build

      # Functions specific steps
      - name: Build functions
        if: matrix.workspace == 'functions'
        run: |
          cd functions
          npm run build

      - name: Lint functions
        if: matrix.workspace == 'functions'
        run: |
          cd functions
          npm run lint

      # Upload coverage reports
      - name: Upload coverage to Codecov
        if: matrix.workspace == 'apps/web'
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Job 2: Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 3: Contract Security Analysis
  contract-security:
    name: Smart Contract Security
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, 'packages/contracts') || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd packages/contracts
          npm ci

      - name: Compile contracts
        run: |
          cd packages/contracts
          npm run build

      - name: Run static analysis
        run: |
          cd packages/contracts
          npm run lint

      # Note: Add Slither or other security tools here if needed
      - name: Gas report
        run: |
          cd packages/contracts
          REPORT_GAS=true npm run test

  # Job 4: Build and Deploy Preview (for PRs)
  preview:
    name: Build Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all packages
        run: npm run build

      - name: Deploy to preview (Vercel)
        if: github.event_name == 'pull_request'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Job 5: Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web app
        run: |
          cd apps/web
          npm run build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Job 6: Dependency Check
  dependencies:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Check for duplicate dependencies
        run: npx npm-check-duplicates

      - name: License compliance check
        run: npx license-checker --summary

  # Job 7: Code Formatting Check
  formatting:
    name: Code Formatting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Prettier formatting
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md,yml,yaml}"

      - name: Check ESLint rules
        run: |
          cd apps/web
          npm run lint

# Workflow summary job
  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [quality, security, dependencies, formatting]
    if: always()
    
    steps:
      - name: Check overall status
        run: |
          if [[ "${{ needs.quality.result }}" == "failure" || "${{ needs.security.result }}" == "failure" ]]; then
            echo "Critical jobs failed"
            exit 1
          elif [[ "${{ needs.dependencies.result }}" == "failure" || "${{ needs.formatting.result }}" == "failure" ]]; then
            echo "Non-critical jobs failed, but continuing"
            exit 0
          else
            echo "All jobs passed successfully"
          fi